{"tagline":"simple configuration file parser.","google":"","name":"goconfig","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"goconfig provides parsing for simple configuration file.\r\n\r\nA configuration is expected to be in the format\r\n\r\n```\r\n[ sectionName ]\r\nkey1 = some value\r\nkey2 = some other value\r\n# we want to explain the importance and great forethought\r\n# in this next value.\r\nkey3 = unintuitive value\r\n[ anotherSection ]\r\nkey1 = a value\r\nkey2 = yet another value\r\n#...\r\n```\r\n\r\nBlank lines are skipped, and lines beginning with `#` are considered\r\ncomments to be skipped. It is an error to have a section marker ('[]')\r\nwithout a section name. `key = ` lines will set the line to a blank\r\nvalue. If no section is given, the default section (`default`).\r\n\r\nParsing a file can be done with the ParseFile function. It will return\r\na `map[string]map[string]string`. For example, if the section `foo` is\r\ndefined, and `foo = bar` is specified:\r\n\r\n```\r\nimport config \"github.com/gokyle/goconfig\"\r\nfunc getFoo() string {\r\n        conf = config.ParseFile(\"config.conf\")\r\n        return conf[\"foo\"][\"bar\"]\r\n}\r\n```\r\n\r\n"}